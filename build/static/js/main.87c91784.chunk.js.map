{"version":3,"sources":["utils/types.ts","utils/cells-setup.ts","components/Context.tsx","components/Button.tsx","components/Body.tsx","components/Face.tsx","components/NumberDisplay.tsx","components/Timer.tsx","components/App.tsx","index.tsx"],"names":["CellValue","Faces","CellState","generateCells","cells","row","push","col","value","none","state","hidden","minesPlaced","Math","floor","random","mine","mines","surroundingCells","getSurroundingCells","cell","coordinates","r","c","getHiddenSurroundingCells","GameContext","React","createContext","Button","useContext","start","setStart","end","setEnd","setCells","setMines","setFace","checkWin","allVisible","won","stateClass","visible","valueClass","className","onClick","e","preventDefault","newCells","lost","openBlankCells","handleLeftClick","onContextMenu","flagged","handleRightClick","role","aria-label","Body","map","rowIndex","colIndex","key","Face","face","setTime","smile","NumberDisplay","toString","padStart","Timer","time","useEffect","interval","setInterval","min","clearInterval","App","useState","context","Provider","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.87c91784.chunk.js","sourcesContent":["export const MAX_ROWS = 9;\nexport const MAX_COLS = 9;\nexport const NUMBER_OF_MINES = 10;\n\nexport interface Cell {\n\tvalue: CellValue;\n\tstate: CellState;\n};\n\nexport enum CellValue {\n\tnone,\n\tone,\n\ttwo,\n\tthree,\n\tfour,\n\tfive,\n\tsix,\n\tseven,\n\teight,\n\tmine\n}\n\nexport enum Faces {\n\tsmile = \"😁\",\n\tlost = \"😭\",\n\twon = \"😎\"\n}\n\nexport enum CellState {\n\thidden,\n\tvisible,\n\tflagged\n}\n\nexport interface Coordinate {\n\trow: number;\n\tcol: number;\n}","import { Cell, CellState, CellValue, Coordinate, MAX_COLS, MAX_ROWS, NUMBER_OF_MINES } from \"./types\";\n\nexport const generateCells = (): Cell[][] => {\n  const cells: Cell[][] = [];\n\n  for (let row = 0; row < MAX_ROWS; row++) {\n    cells.push([]);\n\n    for (let col = 0; col < MAX_COLS; col++) {\n      cells[row].push({\n        value: CellValue.none,\n        state: CellState.hidden\n      })\n    }\n  }\n\n  let minesPlaced = 0;\n\n  while (minesPlaced < NUMBER_OF_MINES) {\n    const row = Math.floor(Math.random() * MAX_ROWS);\n    const col = Math.floor(Math.random() * MAX_COLS);\n\n    if (cells[row][col].value !== CellValue.mine) {\n      cells[row][col].value = CellValue.mine;\n      minesPlaced++;\n    }\n  }\n\n  for (let row = 0; row < MAX_ROWS; row++) {\n    for (let col = 0; col < MAX_COLS; col++) {\n      let mines = 0;\n      const surroundingCells = getSurroundingCells(row, col);\n\n      for (const cell of surroundingCells) {\n        if (cells[cell.row][cell.col].value === CellValue.mine) {\n          mines++;\n        }\n      }\n\n      if (cells[row][col].value !== CellValue.mine) {\n        cells[row][col].value = mines;\n      }\n    }\n  }\n\n  return cells;\n}\n\nexport const openBlankCells = (cells: Cell[][], row: number, col: number): Cell[][] => {\n  if (cells[row][col].value === CellValue.none) {\n    const surroundingCells = getHiddenSurroundingCells(cells, row, col);\n\n    for (const cell of surroundingCells) {\n      cells[cell.row][cell.col].state = CellState.visible;\n    }\n\n    for (const cell of surroundingCells) {\n      openBlankCells(cells, cell.row, cell.col);\n    }\n  }\n\n  return cells;\n}\n\nconst getSurroundingCells = (row: number, col: number): Coordinate[] => {\n  const coordinates = []\n\n  for (let r = row - 1; r <= row + 1; r++) {\n    for (let c = col - 1; c <= col + 1; c++) {\n      if (r >= 0 && r < MAX_ROWS && c >= 0 && c < MAX_COLS) {\n        coordinates.push({ row: r, col: c });\n      }\n    }\n  }\n\n  return coordinates;\n}\n\nconst getHiddenSurroundingCells = (cells: Cell[][], row: number, col: number): Coordinate[] => {\n  const coordinates = []\n\n  for (let r = row - 1; r <= row + 1; r++) {\n    for (let c = col - 1; c <= col + 1; c++) {\n      if (r >= 0 && r < MAX_ROWS && c >= 0 && c < MAX_COLS) {\n        if (\n          cells[r][c].state === CellState.hidden &&\n          cells[r][c].value !== CellValue.mine\n        ) {\n          coordinates.push({ row: r, col: c });\n        }\n      }\n    }\n  }\n\n  return coordinates;\n}","import React from \"react\";\nimport { Cell, Faces } from \"../utils/types\";\n\nexport interface IGameContext {\n  start: boolean;\n  setStart: React.Dispatch<React.SetStateAction<boolean>>;\n  end: boolean;\n  setEnd: React.Dispatch<React.SetStateAction<boolean>>;\n  cells: Cell[][];\n  setCells: React.Dispatch<React.SetStateAction<Cell[][]>>;\n  mines: number;\n  setMines: React.Dispatch<React.SetStateAction<number>>;\n  face: Faces;\n  setFace: React.Dispatch<React.SetStateAction<Faces>>;\n  time: number;\n  setTime: React.Dispatch<React.SetStateAction<number>>;\n}\n\nconst GameContext = React.createContext({} as IGameContext);\n\nexport default GameContext;\n","import React, { useContext } from \"react\";\nimport \"../styles/Button.scss\";\nimport { openBlankCells } from \"../utils/cells-setup\";\nimport { CellState, CellValue, Faces, MAX_COLS, MAX_ROWS } from \"../utils/types\";\nimport GameContext from \"./Context\";\n\ninterface ButtonProps {\n  state: CellState;\n  value: CellValue;\n  row: number;\n  col: number;\n}\n\nconst Button: React.FC<ButtonProps> = ({ state, value, row, col }) => {\n  const {\n    start, setStart,\n    end, setEnd,\n    cells, setCells,\n    mines, setMines,\n    setFace\n  } = useContext(GameContext);\n\n  const checkWin = () => {\n    let allVisible = true;\n\n    for (let r = 0; r < MAX_ROWS; r++) {\n      for (let c = 0; c < MAX_COLS; c++) {\n        if (cells[r][c].state === CellState.hidden) {\n          allVisible = false;\n          break;\n        }\n      }\n\n      if (!allVisible) {\n        break;\n      }\n    }\n\n    if (allVisible) {\n      setStart(false);\n      setFace(Faces.won);\n      setEnd(true);\n    }\n  }\n\n  const handleLeftClick = (row: number, col: number) => (e: React.MouseEvent): void => {\n    e.preventDefault();\n\n    const newCells = [...cells];\n\n    if (!end) {\n      if (newCells[row][col].state !== CellState.hidden) {\n        return;\n      }\n\n      if (!start) {\n        setStart(true);\n      }\n\n      if (newCells[row][col].value === CellValue.mine) {\n        for (let r = 0; r < MAX_ROWS; r++) {\n          for (let c = 0; c < MAX_COLS; c++) {\n            newCells[r][c].state = CellState.visible;\n          }\n        }\n\n        setCells(newCells);\n        setFace(Faces.lost);\n        setStart(false);\n        setEnd(true);\n      } else {\n        newCells[row][col].state = CellState.visible;\n\n        if (newCells[row][col].value === CellValue.none) {\n          setCells(openBlankCells(newCells, row, col));\n        } else {\n          setCells(newCells);\n        }\n\n        checkWin();\n      }\n    }\n  }\n\n  const handleRightClick = (row: number, col: number) => (e: React.MouseEvent): void => {\n    e.preventDefault();\n\n    if (!start || mines === 0) {\n      return;\n    }\n\n    if (cells[row][col].state === CellState.hidden) {\n      cells[row][col].state = CellState.flagged;\n      setCells(cells);\n      setMines(mines - 1);\n    } else if (cells[row][col].state === CellState.flagged) {\n      cells[row][col].state = CellState.hidden;\n      setCells(cells);\n      setMines(mines + 1);\n    }\n\n    checkWin();\n  }\n\n  const renderContent = (): React.ReactNode => {\n    if (state === CellState.visible) {\n      if (value === CellValue.mine) {\n        return <span role=\"img\" aria-label=\"face\">💣</span>\n      } else if (value === CellValue.none) {\n        return null;\n      } else {\n        return value;\n      }\n    } else if (state === CellState.flagged) {\n      return <span role=\"img\" aria-label=\"face\">🚩</span>\n    }\n\n    return null;\n  }\n\n  const stateClass = state === CellState.visible ? \"visible\" : \"\";\n  const valueClass = `value-${value}`;\n\n  return (\n    <div\n      className={`Button ${stateClass} ${valueClass}`}\n      onClick={handleLeftClick(row, col)}\n      onContextMenu={handleRightClick(row, col)}\n    >\n      {renderContent()}\n    </div >\n  )\n}\n\nexport default Button;","import React, { useContext } from \"react\";\nimport \"../styles/Body.scss\";\nimport Button from \"./Button\";\nimport GameContext from \"./Context\";\n\nconst Body: React.FC = () => {\n  const { cells } = useContext(GameContext);\n\n  return (\n    <div className=\"Body\">\n      {\n        cells.map((row, rowIndex) => {\n          return row.map((cell, colIndex) => {\n            return (\n              <Button\n                key={`${rowIndex}-${colIndex}`}\n                state={cell.state}\n                value={cell.value}\n                row={rowIndex}\n                col={colIndex}\n              />\n            )\n          });\n        })\n      }\n    </div >\n  )\n}\n\nexport default Body;","import React, { useContext } from \"react\";\nimport \"../styles/Face.scss\";\nimport { generateCells } from \"../utils/cells-setup\";\nimport { Faces, NUMBER_OF_MINES } from \"../utils/types\";\nimport GameContext from \"./Context\";\n\nconst Face: React.FC = () => {\n  const {\n    setStart,\n    setEnd,\n    setCells,\n    face,\n    setFace,\n    setTime,\n    setMines\n  } = useContext(GameContext);\n\n  const handleFaceClick = () => {\n    setCells(generateCells());\n    setStart(false);\n    setEnd(false);\n    setMines(NUMBER_OF_MINES);\n    setFace(Faces.smile);\n    setTime(0);\n  }\n\n  return (\n    <div className=\"Face\" onClick={handleFaceClick}>\n      <span role=\"img\" aria-label=\"face\">{face}</span>\n    </div>\n  )\n}\n\nexport default Face;","import React from \"react\";\nimport \"../styles/NumberDisplay.scss\";\n\ninterface NumberDisplayProps {\n\tvalue: number;\n}\n\nconst NumberDisplay: React.FC<NumberDisplayProps> = ({ value }) => {\n\treturn <div className=\"NumberDisplay\">{value.toString().padStart(3, \"0\")}</div>\n}\n\nexport default NumberDisplay;","import React, { useContext, useEffect } from \"react\";\nimport GameContext from \"./Context\";\nimport NumberDisplay from \"./NumberDisplay\";\n\nconst Timer: React.FC = () => {\n  const { start, time, setTime } = useContext(GameContext);\n\n  useEffect(() => {\n    if (start) {\n      const interval = setInterval(() => setTime(Math.min(time + 1, 999)), 1000);\n      return () => clearInterval(interval);\n    }\n  }, [start, time, setTime]);\n\n  return <NumberDisplay value={time} />\n}\n\nexport default Timer;","import React, { useState } from \"react\";\nimport \"../styles/App.scss\";\nimport { generateCells } from \"../utils/cells-setup\";\nimport { Cell, Faces, NUMBER_OF_MINES } from \"../utils/types\";\nimport Body from \"./Body\";\nimport GameContext from \"./Context\";\nimport Face from \"./Face\";\nimport NumberDisplay from \"./NumberDisplay\";\nimport Timer from \"./Timer\";\n\nconst App: React.FC = () => {\n  const [start, setStart] = useState<boolean>(false);\n  const [end, setEnd] = useState<boolean>(false);\n  const [cells, setCells] = useState<Cell[][]>(generateCells());\n  const [mines, setMines] = useState<number>(NUMBER_OF_MINES);\n  const [face, setFace] = useState<Faces>(Faces.smile);\n  const [time, setTime] = useState<number>(0);\n\n  const context = {\n    start, setStart,\n    end, setEnd,\n    cells, setCells,\n    mines, setMines,\n    face, setFace,\n    time, setTime\n  };\n\n  return (\n    <div className=\"App\">\n      <GameContext.Provider value={context}>\n        <div className=\"Header\">\n          <NumberDisplay value={context.mines} />\n          <Face />\n          <Timer />\n        </div>\n        <Body />\n      </GameContext.Provider>\n    </div>\n  )\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from \"./components/App\";\nimport './styles/index.scss';\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}